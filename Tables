public interface ITableField
{
    string Name { get; } // Name of the field to show user
    object Value { get; } // if I want to get raw field data
    string ValueAsString { get; } // How field data will be shown user

    bool TrySetValue(string input, out string error); // Return true on success and false on failure. error is always required.
}

// Example
public class IntField : ITableField
{
    public string Name { get; }
    private int _value;
    public object Value => _value;
    public string ValueAsString => _value.ToString();

    public IntField(string name, int value)
    {
        Name = name;
        _value = value;
    }

    public bool TrySetValue(string input, out string error)
    {
        if (int.TryParse(input, out int v))
        {
            _value = v;
            error = string.Empty;
            return true;
        }
        error = "Ожидалось целое число";
        return false;
    }
}
// =-=-=-=-=-=-=-=--=-=--=-=-=-=-=-=-=-=-=-=--= //

public class Table
{
    public string Name { get; set; } // To sort obects
    public List<ITableField> Fields { get; } = new(); // stores all fields

    public Table(string name) => Name = name;

    public void AddField(ITableField field) => Fields.Add(field);
    public void RemoveField(string name) => Fields.RemoveAll(f => f.Name == name);
    public override string? ToString(); // What user will see in menu
}
